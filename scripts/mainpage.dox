

/** @mainpage Package Description
*
*
* @section intro Introduction
* This collection of modules is designed to automate the de novo assembly 
* process and give some runtime control. The numerical solvers are built in the
* RefAligner project. The Pipeline project calls the RefAligner binaries with
* user defined options and performs process logging, contig characterization, and
* workflow control. 
* 
* The Pipeline project also handles distributing tasks on available resources; 
* on a single node or on a cluster. The cluster control is done through DRMAA 
* libraries and the drmaa-python package (http://code.google.com/p/drmaa-python/)
* 
* RefAligner and Assembler are designed to have a large degree of flexibility
* to accomodate significant changes in input characteristics. It is useful do
* define approx. 100 of options specific to the genome and data quality. 
* These options are defined in the optArguments.xml
* 
* 


* @section keys Key Elements
* - Assembly Phases
* -- The following modules define and queue the binary jobs with the correct 
* parameters according to the optArgmentms.xml and runtime flow arguements. Also,
* using the bypass command, the assembly can be restarted at any point in the
* workflow, to change parameters or branch the solution for some reason. All 
* history will be logged.
* -# Image Detection : ImageProcessingModule.py
* -# Sample Characterization : SampleCharModule.py
* -# Hash Search : HashModule.py
* -# Pairwise Comparison : PairwiseModule.py
* -# Assembly : AssemblyModule.py
* -# Refinement : RefinementModule.py
* -# Contig Characterization : CharacterizationModule.py & MapClassesRev.py
* 
* - Workflow
* -- The workflow is defined in Pipeline.py. The two classes in this file are: 
* varsPipeline which prescribes the workflow and sets up the workspace and 
* DNPipeline which executes the workflow according to varsPipeline. Some of the
* key behaviors of these are parsing command line to define top level workflow, 
* parsing and storing all run-time 
* parameters, creating output data structure, snap-shoting inputs,commands and 
* data.
* -# Command Line Parser : Pipeline.varsPipeline.commandLineParser
* -# XML reader: Pipeline.varsPipeline.parseArguments
* -# Set up file structure : Pipeline.varsPipeline.assignFileTargets 
* & Pipeline.varsPipeline.setupFileStructure
* -# Execute Prescribed Workflow : Pipeline.DNPipeline.run
* -# Execute Prescribed Workflow for Celery/Django : tasks.DNPipelineT, should
* be updated to mirror Pipeline.DNPipeline.run
* 
* - Distributed Computation
* -- The primary function of the above modules is to specify the executable 
* operations for each stage. There are two classes that define the behavior of 
* the job execution and load distribution.
* -# Multithreading.singleJob : Details for a single job. Start/stop 
* behavior. Output checking, process logging functionality.
* -# Multithreading.jobWrapper : Queueing for a group of jobs.

*
*/
